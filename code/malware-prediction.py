#! - * - coding UTF-8 - * -

from src.extract_features.extract_features import extract_features
from src.model.create_model import create_Model
from src.model.prediction import prediction
from envparse import env
import datetime
from src.mongo.database import DataBaseMongo
from src.model.preprocess import preprocess

def main():
    start=datetime.datetime.now().time().strftime('%j %H:%M:%S')
    print(start)
    ip_Server_Mongo = env.str('IP_SERVER_MONGO', default='172.16.0.2')
    db_Name = env.str('DB_NAME', default='kaggle_microsoft-malware-prediction')
    dir_Data_Raw=env.str('DIR_DATA_RAW', default='/data/raw')
    seed=env.int('SEED',default=1234)
    perform_Method=env.str('PERFORM_METHOD', default='ALL')
    names_collection='features'
    types_of_features = ('numeric', 'text','labels')
    prefix_collections_train='train'
    prefix_collections_test = 'test'
    dir_OriginDataTrain = dir_Data_Raw + '/train.csv'
    dir_OriginDataTest = dir_Data_Raw + '/test.csv'
    if perform_Method=='EXTRACT' or perform_Method=='ALL':
        db = DataBaseMongo(ip_Server_Mongo, db_Name)
        db.selectCollection(prefix_collections_train + '_' + names_collection).drop()
        db.selectCollection(prefix_collections_test + '_' + names_collection).drop()
        extract_features(db,dir_Data_Raw, dir_OriginDataTrain, prefix_collections_train, names_collection)
        extract_features(db, dir_Data_Raw, dir_OriginDataTest, prefix_collections_test, names_collection)
    if perform_Method == 'PREPROCESS' or perform_Method == 'ALL':
        db = DataBaseMongo(ip_Server_Mongo, db_Name)
        preprocess(prefix_collections_train, prefix_collections_test, dir_Data_Raw, db, names_collection, types_of_features)
    if perform_Method == 'MODEL' or perform_Method == 'MODEL_PREDICT' or perform_Method == 'ALL':
        create_Model(prefix_collections_train, dir_Data_Raw, types_of_features, seed)
    if perform_Method == 'PREDICT' or perform_Method == 'MODEL_PREDICT' or perform_Method == 'ALL':
        prediction(prefix_collections_test, types_of_features, dir_Data_Raw, seed)
    finish=datetime.datetime.now().time().strftime('%j %H:%M:%S')
    print(finish)
    print(datetime.datetime.strptime(finish,'%j %H:%M:%S') - datetime.datetime.strptime(start,'%j %H:%M:%S'))

if __name__ == '__main__':
    main()
