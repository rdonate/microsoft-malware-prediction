#! - * - coding UTF-8 - * -

from src.extract_features.extract_features import extract_features
from src.model.create_model import create_Model
from src.model.prediction import prediction
from envparse import env
import datetime
from src.mongo.database import DataBaseMongo

def main():
    start=datetime.datetime.now().time().strftime('%j %H:%M:%S')
    print(start)
    ip_Server_Mongo = env.str('IP_SERVER_MONGO', default='172.16.0.2')
    db_Name = env.str('DB_NAME', default='kaggle_microsoft-malware-prediction')
    dir_Data_Raw=env.str('DIR_DATA_RAW', default='/data/raw')
    seed=env.int('SEED',default=1234)
    perform_Method=env.str('PERFORM_METHOD', default='ALL')
    names_collections=('total', 'features', 'rankingFeatures', 'discreeting')
    prefix_collections='train'
    dir_OriginDataTrain=dir_Data_Raw+'/train.csv'
    db = DataBaseMongo(ip_Server_Mongo, db_Name)
    for colection in names_collections:
        db.selectCollection(prefix_collections+'_'+colection).drop()
    if perform_Method=='EXTRACT_TRAIN' or perform_Method=='EXTRACT_ALL' or perform_Method=='ALL':
        lengthDB = extract_features(db, dir_OriginDataTrain, prefix_collections, names_collections)
        print(lengthDB)
    if perform_Method == 'MODEL' or perform_Method == 'MODEL_PREDICT' or perform_Method == 'ALL':
        model = create_Model(prefix_collections, db,names_collections, lengthDB, seed)
    dir_OriginDataTest = dir_Data_Raw+'/test.csv'
    prefix_collections = 'test'
    if perform_Method == 'EXTRACT_TEST' or perform_Method == 'EXTRACT_ALL' or perform_Method == 'ALL':
        lengthDB = extract_features(db, dir_OriginDataTest, prefix_collections, names_collections)
    if perform_Method == 'PREDICT' or perform_Method == 'MODEL_PREDICT' or perform_Method == 'ALL':
        prediction(model,db, prefix_collections, names_collections,lengthDB, dir_OriginDataTest)
    finish=datetime.datetime.now().time().strftime('%j %H:%M:%S')
    print(finish)
    print(datetime.datetime.strptime(finish,'%j %H:%M:%S') - datetime.datetime.strptime(start,'%j %H:%M:%S'))

if __name__ == '__main__':
    main()
