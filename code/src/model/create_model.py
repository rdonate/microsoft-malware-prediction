#! - * - coding UTF-8 - * -

from src.model.select_features_kind import select_features
from src.model.validation import crossvalidationXGBoost
import xgboost as xgb

def create_Model(prefix_collection, db,names_collections, lenght, num_features, seed):
    feautures, labels = select_features(db, prefix_collection, names_collections, num_features, lenght)
    labels = labels-1
    params = {'num_class':9, 'eval_metric':['mlogloss'], 'objective':'multi:softprob', 'booster':'gbtree', 'silent':1, 'seed':2*seed}
    num_estimators=100
    watchlist = []
    dtrain = xgb.DMatrix(feautures,label=labels)
    score = crossvalidationXGBoost(num_estimators, params, dtrain)
    model = xgb.train(params, dtrain, num_estimators, watchlist)
    print('Values of Scores mean: train {} and test {}'.format(score['train-mlogloss-mean'][-1],score['test-mlogloss-mean'][-1]))
    return model
