#! - * - coding UTF-8 - * -

from sklearn.ensemble import RandomForestClassifier
from joblib import load, dump
from sklearn.model_selection import cross_val_score
import numpy as np
import os, gc

def create_Model(prefix_collections_train, dir_Data_Raw, types_of_features, seed):
    np.random.seed(seed=seed)
    dir_model = dir_Data_Raw + '/models/'
    dir_data = dir_Data_Raw + '/data/'
    if not os.path.exists(dir_model):
        os.mkdir(dir_model)
    results = np.zeros(2)
    for index in range(2):
        results[index] = create_one_model(prefix_collections_train, dir_data, dir_model, types_of_features, index)
    with open(dir_model + 'model_scores', 'wb') as file:
        dump(results, file)
    file.close()
    del file, results
    gc.collect()

def create_one_model(prefix_collection, dir_data, dir_model, types_of_features, index):
    with open( dir_data + prefix_collection + '_' + types_of_features[-1], 'rb') as file:
        label_train = load(file)
    file.close()
    del file
    gc.collect()
    with open(dir_data + prefix_collection + '_' + types_of_features[index], 'rb') as file:
        data = load(file)
    file.close()
    del file
    gc.collect()
    model = RandomForestClassifier(n_estimators=100, criterion='entropy', random_state=int(np.random.random_integers(0, np.iinfo(np.int32).max)))
    score_numbers_accuracy = cross_val_score(model, data, label_train, cv=10, scoring='accuracy')
    results = np.mean(score_numbers_accuracy)
    model.fit(data, label_train)
    del data, label_train
    gc.collect()
    with open(dir_model + 'model_' + types_of_features[index], 'wb') as file:
        dump(model, file)
    file.close()
    del file, model
    gc.collect()
    return results
