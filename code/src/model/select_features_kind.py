#! - * - coding UTF-8 - * -

import numpy as np

def select_features(db, prefix_collections, names_collections, num_features, lenghtDB):
    features=np.zeros((lenghtDB, num_features))
    labels=np.zeros(lenghtDB)
    include_labels = False
    collection = db.selectCollection(prefix_collections + '_' + names_collections[2])
    query = collection.aggregate([{'$lookup':{'from':prefix_collections+'_'+names_collections[1],
                                                'localField':'feature',
                                                'foreignField':'feature',
                                                'as':'fromFeatures'}}]
                                   ,allowDiskUse=True)
    for feature in query:
        for info_file in feature['fromFeatures']:
            features[info_file['index_file'],feature['position']]=info_file['n_count']
            if 'label' in info_file:
                labels[info_file['index_file']]=info_file['label']
                include_labels=True
    if (not include_labels):
        return features
    index_labels_zero = np.reshape(np.argwhere(labels == 0), len(np.argwhere(labels == 0)))
    for index_label in index_labels_zero:
        labels[index_label]=db.selectCollection(prefix_collections + '_' + names_collections[0]).find_one({'_id':int(index_label)})['label']
    return features, labels
