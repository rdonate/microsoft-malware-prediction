#! - * - coding UTF-8 - * -

import mmap,re
import numpy as np


def extract_features(db, dir_Data_Raw, prefix_collections, names_collections):
    lengthDB = 0
    num_line=0
    with open(dir_Data_Raw, 'r+b') as file:
        mm = mmap.mmap(file.fileno(), 0)
        name_features = re.split(",", re.sub(r"^b'|\\n'$", "", str(file.readline())))
        isText = set()
        while True:
            line = file.readline()
            if not line or line == "'":
                break
            if line == '':
                continue
            line = re.split(",", re.sub(r"^b'|\\n'$", "", str(line)))
            num_line += 1
            for index, elem in enumerate(line):
                if not elem.isnumeric():
                    if elem.count('.') == 1:
                        aux_elem = re.split('.', elem)
                        if (not (aux_elem[0].isnumeric() and aux_elem[1].isnumeric())) and (not elem==""):
                            isText.add(index)
                    else:
                        isText.add(index)
    if 0 in isText:
        isText.remove(0)
    colection = db.selectCollection(prefix_collections + '_' + names_collections[0])
    with open(dir_Data_Raw, 'r+b') as file:
        mm = mmap.mmap(file.fileno(), 0)
        name_features = np.array(re.split(",", re.sub(r"^b'|\\n'$", "", str(file.readline()))),dtype=str)
        name_features = np.insert(name_features, len(name_features), 'index')
        isNumerics = list(set(range(len(name_features)))-isText-set([0]))
        while True:
            line = file.readline()
            if not line or line=="'":
                break
            if line == '':
                continue
            aux_line = re.split(",", re.sub(r"^b'|\\n'$", "", str(line)))
            aux_line.append(lengthDB)
            aux_line = np.array(aux_line, dtype=str)
            value = dict()
            try:
                for index in isNumerics:
                    if aux_line[index].isnumeric():
                        value[name_features[index]]=int(aux_line[index])
                    else:
                        value[name_features[index]] = float(aux_line[index])
                value_text=""
                for index, elem in zip(list(isText),aux_line[list(isText)]):
                    value_text=value_text+name_features[index].strip()+':'+elem+','
                value['text'] = value_text[:-1]
                value[name_features[0]]=aux_line[0]
                colection.insert(value)
            except Exception as e:
                print(aux_line)
                print(value)
                print(e)
                break
            lengthDB += 1
    return lengthDB

